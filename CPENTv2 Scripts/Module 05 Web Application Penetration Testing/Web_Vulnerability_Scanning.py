import os
import requests
from urllib.parse import urljoin
from bs4 import BeautifulSoup
import subprocess

# Configuration
OUTPUT_FILE = "Web_Vulnerability_Scanning_Results.txt"

# Ensure dependencies are installed
def install_dependencies():
    os.system('pip install requests beautifulsoup4')

# 1. Identify User Input Entry Points
def identify_input_points(url):
    results = ["[1] Identifying User Input Entry Points"]
    headers = {'User-Agent': 'Mozilla/5.0'}
    response = requests.get(url, headers=headers)
    soup = BeautifulSoup(response.text, 'html.parser')

    # Detect forms
    forms = soup.find_all('form')
    results.append(f"Forms Found: {len(forms)}")

    for idx, form in enumerate(forms, 1):
        action = form.get('action', 'Not Specified')
        method = form.get('method', 'GET').upper()
        inputs = []

        for input_tag in form.find_all('input'):
            input_name = input_tag.get('name', 'Unnamed')
            input_type = input_tag.get('type', 'text')
            input_value = input_tag.get('value', 'None')
            inputs.append(f"Name: {input_name}, Type: {input_type}, Value: {input_value}")

        results.append(f"\nForm {idx}:")
        results.append(f"Action: {action}")
        results.append(f"Method: {method}")
        results.append("Inputs:")
        results.extend(inputs)

    save_results(results)
    return forms

# 2. Scan for Vulnerabilities using Nikto
def scan_vulnerabilities(url):
    results = ["[2] Scanning for Known Vulnerabilities"]
    command = f"nikto -h {url}"
    output = subprocess.getoutput(command)
    results.append(output)
    save_results(results)

# 3. Perform Fuzz Testing
def fuzz_testing(url, forms):
    results = ["[3] Performing Fuzz Testing"]
    payloads = [
        "' OR '1'='1",  # SQL Injection
        "<script>alert('XSS')</script>",  # XSS
        "A" * 5000  # Buffer Overflow
    ]

    headers = {'User-Agent': 'Mozilla/5.0'}
    for form in forms:
        action = form.get('action')
        method = form.get('method', 'GET').upper()
        inputs = form.find_all('input')

        for payload in payloads:
            data = {}
            for input_tag in inputs:
                input_name = input_tag.get('name')
                if input_name:
                    data[input_name] = payload

            form_url = urljoin(url, action)
            try:
                if method == 'POST':
                    response = requests.post(form_url, data=data, headers=headers)
                else:
                    response = requests.get(form_url, params=data, headers=headers)

                results.append(f"\nTesting Payload: {payload}")
                results.append(f"Response Code: {response.status_code}")
                results.append(f"Response Content: {response.text[:500]}...\n")  # Truncate response for brevity

            except Exception as e:
                results.append(f"Error testing payload {payload}: {str(e)}")

    save_results(results)

# Save Results to File
def save_results(data):
    with open(OUTPUT_FILE, "a") as file:
        for line in data:
            file.write(line + "\n")

# Main Execution
if __name__ == "__main__":
    install_dependencies()
    target_url = input("Enter the target URL (e.g., https://example.com): ")
    forms = identify_input_points(target_url)
    scan_vulnerabilities(target_url)
    fuzz_testing(target_url, forms)
    print(f"Testing complete. Check '{OUTPUT_FILE}' for results.")
